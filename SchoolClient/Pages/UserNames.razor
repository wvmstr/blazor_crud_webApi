@page "/students"
@inject IHttpClientFactory ClientFactory
@*inject HttpClient httpClient*@

<h1>Students</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (students == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class='table table-hover'>
        <thead>
            <tr>
                <th>ID</th>
                <th>First Name</th>
                <th>Last Name</th>
                <th>School</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in students)
            {
                <tr>
                    <td>@item.StudentId</td>
                    <td>@item.FirstName</td>
                    <td>@item.LastName</td>
                    <td>@item.School</td>
                </tr>
            }
        </tbody>
    </table>
}
@*<EditForm Model="@Student" OnValidSubmit="Student">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div>
        InputText id="firstname" bind="@Student.FirstName" />
    </div>
    <button type="submit">Save</button>
</EditForm>
@if (students != null) // Insert form
    {
        <input placeholder="First Name" bind="@firstName" />
        <br />
        <input placeholder="Last Name" bind="@lastName" />
        <br />
        <input placeholder="School" bind="@school" />
        <br />
        <button @onclick="@Insert" class="btn btn-warning">Insert</button>
    }*@

@functions {
    Student[] students;

    string studentId;
    string firstName;
    string lastName;
    string school;


    protected async override Task OnInitializedAsync()
    {
        try
        {
            var httpClient = ClientFactory.CreateClient("ServerAPI");
            students = await httpClient.GetFromJsonAsync<Student[]>("api/students");
        }
        catch (Exception ex) { Console.WriteLine(ex.Message); }


    }

    private async Task Insert()
    {
        Student student = new Student()
        {
            StudentId = Guid.NewGuid().ToString(),
            FirstName = firstName,
            LastName = lastName,
            School = school
        };
        try
        {


            var httpClient = ClientFactory.CreateClient("ServerAPI");
            await httpClient.PostAsJsonAsync("api/students", student);
            ClearFields();
            students = await httpClient.GetFromJsonAsync<Student[]>("api/students");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    protected void ClearFields()
    {
        studentId = string.Empty;
        firstName = string.Empty;
        lastName = string.Empty;
        school = string.Empty;
    }

    @*protected async Task Insert()
        {
            string endpoint = $"https://localhost:44393/api/students";

            Student student = new Student()
            {
                StudentId = Guid.NewGuid().ToString(),
                FirstName = firstName,
                LastName = lastName,
                School = school
            };

            var httpClient = cli   //ClientFactory.CreateClient("ServerAPI");
            await httpClient.PostAsJsonAsync("api/students", student);    //.SendAsync(HttpMethod.Post, endpoint, student);   //.SendJsonAsync(HttpMethod.Post, endpoint, student);
                                                                          //    ClearFields();
                                                                          //    await load();

            //    StateHasChanged(); // causes the page to get automatically refreshed
            //}

            //protected void ClearFields()
            //{
            //    studentId = string.Empty;
            //    firstName = string.Empty;
            //    lastName = string.Empty;
            //    school = string.Empty;
            //}*@

    //httpClient.BaseAddress = new Uri(@"https://localhost:44318/");
    //try
    //{
    //    students = await httpClient.GetFromJsonAsync<Student[]>("api/students");
    //}
    //catch (Exception ex) { Console.WriteLine(ex.Message); }
}