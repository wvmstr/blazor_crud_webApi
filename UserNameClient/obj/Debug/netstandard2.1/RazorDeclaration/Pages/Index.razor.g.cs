#pragma checksum "C:\Users\Robert\source\Repos\SchoolNew\UserNameClient\Pages\Index.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "75507e66ab75b07e240f3bf281c1a04ff4d25244"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace UserNameClient.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\Robert\source\Repos\SchoolNew\UserNameClient\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Robert\source\Repos\SchoolNew\UserNameClient\_Imports.razor"
using System.Net.Http.Json;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Robert\source\Repos\SchoolNew\UserNameClient\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Robert\source\Repos\SchoolNew\UserNameClient\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Robert\source\Repos\SchoolNew\UserNameClient\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Robert\source\Repos\SchoolNew\UserNameClient\_Imports.razor"
using Microsoft.AspNetCore.Components.WebAssembly.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Robert\source\Repos\SchoolNew\UserNameClient\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\Robert\source\Repos\SchoolNew\UserNameClient\_Imports.razor"
using UserNameClient;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\Robert\source\Repos\SchoolNew\UserNameClient\_Imports.razor"
using UserNameClient.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\Robert\source\Repos\SchoolNew\UserNameClient\_Imports.razor"
using UserNameLibrary;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\Robert\source\Repos\SchoolNew\UserNameClient\_Imports.razor"
using MatBlazor;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/")]
    public partial class Index : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 142 "C:\Users\Robert\source\Repos\SchoolNew\UserNameClient\Pages\Index.razor"
 

    UserName[] usernames;

    UserName newUserName = new UserName();

    [Parameter] public int NameId { get; set; }
    UserName editedUserName = new UserName();

    //int nameId;
    string service;
    string user;
    string email;
    string url;
    string password;
    //DateTime modified;
    int ids = 0;
    //int nameIds = 0;
    string ImageSortname = "Images/sortAsc.png";

    bool createDialogOpen = false;
    bool editDialogOpen = false;
    bool deleteDialogOpen = false;

    //var httpClient = ClientFactory.CreateClient("ServerAPI");

    protected async override Task OnInitializedAsync()
    {
        try
        {
            var httpClient = ClientFactory.CreateClient("ServerAPI");
            usernames = await httpClient.GetFromJsonAsync<UserName[]>("api/usernames");

            if (usernames != null)
            {
                string recordCount = String.Format("{0} records retrieved", usernames.Count());
                matToaster.Add(recordCount, MatToastType.Success);
            }
            else
            {
                matToaster.Add("no records found", MatToastType.Warning);
            }
        }
        catch (Exception ex) { Console.WriteLine(ex.Message); }


    }

    async Task NewUserName()
    {
        newUserName.created = DateTime.UtcNow;
        newUserName.modified = DateTime.UtcNow;
        var httpClient = ClientFactory.CreateClient("ServerAPI");
        var response = await httpClient.PostAsJsonAsync("api/usernames", newUserName);
        if (response.IsSuccessStatusCode)
        {
            matToaster.Add(response.ReasonPhrase, MatToastType.Success);
        }
        else
        {
            matToaster.Add(response.ReasonPhrase, MatToastType.Warning);
        }
        await Refresh();
    }

    public void OpenDeleteDialog(int Id)
    {
        newUserName = new UserName();
        newUserName = usernames.Where(x => x.NameId == Id).SingleOrDefault(); // load the user information into the temp user object for worry free editing
        deleteDialogOpen = true;
    }

    async Task DeleteUserName()
    {
        var httpClient = ClientFactory.CreateClient("ServerAPI");
        var response = await httpClient.DeleteAsync($"api/usernames/{newUserName.NameId}");
        if (response.IsSuccessStatusCode)
        {
            matToaster.Add("username deleted", MatToastType.Success);
        }
        else
        {
            matToaster.Add("failed", MatToastType.Warning);
        }
        ClearFields();
        await Refresh();
    }

    public void OpenEditDialog(int Id)
    {
        newUserName = new UserName();
        newUserName = usernames.Where(x => x.NameId == Id).SingleOrDefault(); // load the user information into the temp user object for worry free editing
        editDialogOpen = true;
        //editedUserName.SaveState();
    }

    async Task EditUserName()
    {
        var httpClient = ClientFactory.CreateClient("ServerAPI");
        var response = await httpClient.PutAsJsonAsync("api/usernames", newUserName); ///*editedUserName*/
        if (response.IsSuccessStatusCode)
        {
            matToaster.Add("changes saved", MatToastType.Success);
        }
        else
        {
            matToaster.Add("failed", MatToastType.Warning);
        }
        ClearFields();
        await Refresh();

    }

    //Sorting
    protected async Task Sorting(string sortColumn)
    {
        var httpClient = ClientFactory.CreateClient("ServerAPI");
        usernames = await httpClient.GetFromJsonAsync<UserName[]>("api/usernames");

        if (ids == 0)
        {
            ImageSortname = "Images/sortAsc.png";
            ids = 1;

            switch (sortColumn)
            {
                case "NameId":
                    usernames = usernames.OrderBy(x => x.NameId).ToArray();
                    break;
                case "Service":
                    usernames = usernames.OrderBy(x => x.Service).ToArray();
                    break;
                case "User":
                    usernames = usernames.OrderBy(x => x.User).ToArray();
                    break;
                case "Email":
                    usernames = usernames.OrderBy(x => x.Email).ToArray();
                    break;
                case "Url":
                    usernames = usernames.OrderBy(x => x.Url).ToArray();
                    break;
                case "Password":
                    usernames = usernames.OrderBy(x => x.Password).ToArray();
                    break;
                case "modified":
                    usernames = usernames.OrderBy(x => x.modified).ToArray();
                    break;
            }
        }
        else
        {
            ImageSortname = "Images/sortDes.png";
            ids = 0;

            switch (sortColumn)
            {
                case "NameId":
                    usernames = usernames.OrderByDescending(x => x.NameId).ToArray();
                    break;
                case "Service":
                    usernames = usernames.OrderByDescending(x => x.Service).ToArray();
                    break;
                case "User":
                    usernames = usernames.OrderByDescending(x => x.User).ToArray();
                    break;
                case "Email":
                    usernames = usernames.OrderByDescending(x => x.Email).ToArray();
                    break;
                case "Url":
                    usernames = usernames.OrderByDescending(x => x.Url).ToArray();
                    break;
                case "Password":
                    usernames = usernames.OrderByDescending(x => x.Password).ToArray();
                    break;
                case "modified":
                    usernames = usernames.OrderByDescending(x => x.modified).ToArray();
                    break;
            }
        }
    }

    protected async Task Filtering(String Value, string columnName)
    {
        var httpClient = ClientFactory.CreateClient("ServerAPI");
        usernames = await httpClient.GetFromJsonAsync<UserName[]>("api/usernames");

        if (Value.Trim().Length > 0)
        {
            switch (columnName)
            {
                case "Service":
                    usernames = usernames.Where(x => x.Service.ToUpper().StartsWith(Value.ToUpper())).ToArray();
                    break;
                case "User":
                    usernames = usernames.Where(x => x.User != null && x.User.ToUpper().StartsWith(Value.ToUpper())).ToArray();
                    break;
                case "Email":
                    usernames = usernames.Where(x => x.Email.ToUpper().Contains(Value.ToUpper())).ToArray();
                    break;
                case "Url":
                    usernames = usernames.Where(x => x.Url.ToUpper().Contains(Value.ToUpper())).ToArray();
                    break;
                case "Password":
                    usernames = usernames.Where(x => x.Password.Contains(Value)).ToArray();
                    break;
            }
        }
        else
        {
            //var httpClient = ClientFactory.CreateClient("ServerAPI");
            usernames = await httpClient.GetFromJsonAsync<UserName[]>("api/usernames");
        }
    }

    void OnServiceChanged(ChangeEventArgs args)
    {
        string values = args.Value.ToString();
        Filtering(values, "Service");
    }

    void OnUserChanged(ChangeEventArgs args)
    {
        string values = args.Value.ToString();
        Filtering(values, "User");
    }

    void OnEmailChanged(ChangeEventArgs args)
    {
        string values = args.Value.ToString();
        Filtering(values, "Email");
    }

    void OnUrlChanged(ChangeEventArgs args)
    {
        string values = args.Value.ToString();
        Filtering(values, "Url");
    }

    void OnPasswordChanged(ChangeEventArgs args)
    {
        string values = args.Value.ToString();
        Filtering(values, "Password");
    }

    private async Task Insert()
    {
        UserName username = new UserName()
        {
            Service = service,
            User = user,
            Email = email,
            Url = url,
            Password = password,
            modified = DateTime.UtcNow
        };
        try
        {
            var httpClient = ClientFactory.CreateClient("ServerAPI");
            await httpClient.PostAsJsonAsync("api/usernames", username);
            //ClearFields();
            await Refresh();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    protected void ClearFields()
    {
        service = string.Empty;
        url = string.Empty;
        user = string.Empty;
        email = string.Empty;
        password = string.Empty;

    }

    private async Task Refresh()
    {
        var httpClient = ClientFactory.CreateClient("ServerAPI");
        usernames = await httpClient.GetFromJsonAsync<UserName[]>("api/usernames");
        StateHasChanged();
    }


#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IMatToaster matToaster { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime js { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager navManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IHttpClientFactory ClientFactory { get; set; }
    }
}
#pragma warning restore 1591
